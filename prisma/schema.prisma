// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts Account[]
  sessions Session[]
  jobs     Job[]     @relation("AssignedTechnician")
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Job {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      JobStatus  @default(PENDING)
  priority    Priority   @default(MEDIUM)
  
  customerId     String
  customerName   String
  customerPhone  String?
  customerEmail  String?
  
  locationId     String
  location       Location @relation(fields: [locationId], references: [id])
  
  technicianId   String?
  technician     User?    @relation("AssignedTechnician", fields: [technicianId], references: [id])
  
  scheduledAt    DateTime?
  estimatedDuration Int? // minutes
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  
  dispatchLogs DispatchLog[]
  
  @@map("jobs")
}

model Location {
  id        String   @id @default(cuid())
  address   String
  city      String
  state     String
  zipCode   String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  jobs Job[]
  
  @@map("locations")
}

model DispatchLog {
  id        String          @id @default(cuid())
  jobId     String
  job       Job             @relation(fields: [jobId], references: [id])
  action    DispatchAction
  details   String?
  createdAt DateTime        @default(now())
  
  @@map("dispatch_logs")
}

enum Role {
  ADMIN
  DISPATCHER
  TECHNICIAN
}

enum JobStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DispatchAction {
  CREATED
  ASSIGNED
  REASSIGNED
  STARTED
  COMPLETED
  CANCELLED
}
